// This is your Prisma schema file with integrated E-HRBAC-T
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Base role types for the system
enum RoleType {
    ADMIN
    MODERATOR
    GARDENER
    MEMBER
    AGENT
    ANON
    BOT
    SUS
    IMPOSTOR
    BANNED
}

model User {
    id            String          @id
    appWallet     String          @unique
    username      String          @unique
    extWallet     String          @unique
    email         String?         @unique
    bio           String?
    website       String?
    avatarUrl     String?
    bannerUrl     String?
    profile       Profile?
    communities   UserCommunity[]
    projects      Project[]
    posts         Post[]
    comments      Comment[]
    votes         Vote[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt

    // E-HRBAC-T relationships
    roles         UserRole[]
    roleGrants    RoleGrant[]     @relation("grantor")
    tokens        UserToken[]     // Token holdings for gating

    @@index([appWallet, username, extWallet, email])
}

// Existing Profile model remains unchanged
model Profile {
    displayName           String
    firstName            String?
    lastName            String?
    cityRegion          String?
    country             String?
    primaryRole         String?
    professionalProfile String?
    isStudent           Boolean    @default(false)
    githubUsername      String
    xUsername          String
    telegramUsername    String
    user                User       @relation(fields: [userId], references: [id])
    userId              String     @unique
}

model Project {
    id            String      @id @default(uuid())
    wallet        String?     @unique
    name          String      @unique
    email         String?     @unique
    website       String      @unique
    category      String
    description   String?
    avatarUrl     String?
    bannerUrl     String?
    tokenAddress  String?
    networks      String[]
    admin         User        @relation(fields: [adminId], references: [id])
    adminId       String
    community     Community?  @relation(fields: [communityId], references: [id])
    communityId   String?     @unique
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    // E-HRBAC-T: Project-specific roles and permissions
    projectRoles  Role[]     @relation("projectRoles")

    @@index([wallet, name, email, adminId, category])
}

model Community {
    id            String          @id @default(uuid())
    name          String          @unique
    category      String
    description   String?
    avatarUrl     String?
    bannerUrl     String?
    tokenAddress  String?
    projects      Project[]
    members       UserCommunity[]
    posts         Post[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt

    // E-HRBAC-T: Community-specific roles and token requirements
    communityRoles    Role[]          @relation("communityRoles")
    userRoles        UserRole[]       // Scoped roles for this community
    requiredTokens   CommunityToken[] // Token gating requirements
}

// Enhanced UserCommunity with role integration
model UserCommunity {
    id            String      @id @default(uuid())
    user          User        @relation(fields: [userId], references: [id])
    userId        String
    community     Community   @relation(fields: [communityId], references: [id])
    communityId   String
    isAdmin       Boolean     @default(false)
    isModerator   Boolean     @default(false)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    // E-HRBAC-T: Link to formal roles
    roles         UserRole[]

    @@unique([userId, communityId])
}

// E-HRBAC-T Core Models

model Role {
    id              String          @id @default(uuid())
    type            RoleType
    name            String          @unique
    description     String?

    // Role hierarchy
    parentRole      Role?           @relation("RoleHierarchy", fields: [parentId], references: [id])
    parentId        String?
    childRoles      Role[]          @relation("RoleHierarchy")

    // Scope relationships
    project         Project?        @relation("projectRoles", fields: [projectId], references: [id])
    projectId       String?
    community       Community?      @relation("communityRoles", fields: [communityId], references: [id])
    communityId     String?

    // Permission relationships
    permissions     RolePermission[]
    userRoles       UserRole[]
    roleGrants      RoleGrant[]

    @@index([type])
    @@index([projectId])
    @@index([communityId])
}

model Permission {
    id              String          @id @default(uuid())
    name            String          @unique
    description     String?
    roles           RolePermission[]
}

model RolePermission {
    id              String      @id @default(uuid())
    role            Role        @relation(fields: [roleId], references: [id])
    roleId          String
    permission      Permission  @relation(fields: [permissionId], references: [id])
    permissionId    String

    @@unique([roleId, permissionId])
}

model UserRole {
    id              String          @id @default(uuid())
    user            User            @relation(fields: [userId], references: [id])
    userId          String
    role            Role            @relation(fields: [roleId], references: [id])
    roleId          String

    // Scope - for community/project-specific roles
    community       Community?      @relation(fields: [communityId], references: [id])
    communityId     String?
    userCommunity   UserCommunity?  @relation(fields: [userCommunityId], references: [id])
    userCommunityId String?

    createdAt       DateTime        @default(now())

    @@unique([userId, roleId, communityId])
    @@index([userId])
    @@index([roleId])
}

model RoleGrant {
    id          String      @id @default(uuid())
    grantor     User        @relation("grantor", fields: [grantorId], references: [id])
    grantorId   String
    role        Role        @relation(fields: [roleId], references: [id])
    roleId      String
    expiresAt   DateTime?
    revoked     Boolean     @default(false)
    revokedAt   DateTime?
    createdAt   DateTime    @default(now())

    @@index([grantorId])
    @@index([roleId])
}

// Token Gating Models

model Token {
    id              String          @id @default(uuid())
    address         String          @unique
    chainId         Int
    symbol          String
    decimals        Int

    userTokens      UserToken[]
    communities     CommunityToken[]

    @@index([chainId, address])
}

model UserToken {
    id          String      @id @default(uuid())
    balance     Decimal
    user        User        @relation(fields: [userId], references: [id])
    userId      String
    token       Token       @relation(fields: [tokenId], references: [id])
    tokenId     String
    updatedAt   DateTime    @updatedAt

    @@unique([userId, tokenId])
}

model CommunityToken {
    id              String      @id @default(uuid())
    minBalance      Decimal
    community       Community   @relation(fields: [communityId], references: [id])
    communityId     String
    token           Token       @relation(fields: [tokenId], references: [id])
    tokenId         String

    @@unique([communityId, tokenId])
}

// Existing content models remain largely unchanged
model Post {
    id          String      @id @default(uuid())
    title       String
    content     String?
    media_url   String?
    category    String?     @default("default")
    upvotes     Int         @default(0)
    downvotes   Int         @default(0)
    author      User        @relation(fields: [authorId], references: [id])
    authorId    String
    community   Community?  @relation(fields: [communityId], references: [id])
    communityId String?
    comments    Comment[]
    votes       Vote[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Comment {
    id              String      @id @default(uuid())
    content         String
    upvotes         Int         @default(0)
    downvotes       Int         @default(0)
    author          User        @relation(fields: [authorId], references: [id])
    authorId        String
    post            Post        @relation(fields: [postId], references: [id])
    postId          String
    votes           Vote[]
    parentComment   Comment?    @relation("ChildComments", fields: [parentCommentId], references: [id])
    parentCommentId String?
    childComments   Comment[]   @relation("ChildComments")
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
}

model Vote {
    id          Int         @id @default(autoincrement())
    user        User        @relation(fields: [userId], references: [id])
    userId      String
    post        Post?       @relation(fields: [postId], references: [id])
    postId      String?
    comment     Comment?    @relation(fields: [commentId], references: [id])
    commentId   String?
    voteValue   Int         @default(0)
    createdAt   DateTime    @default(now())
}